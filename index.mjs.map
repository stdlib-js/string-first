{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport isPlainObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport { factory as contains } from '@stdlib/array-base-assert-contains';\nimport firstCodeUnit from '@stdlib/string-base-first';\nimport firstCodePoint from '@stdlib/string-base-first-code-point';\nimport firstGraphemeCluster from '@stdlib/string-base-first-grapheme-cluster';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// VARIABLES //\n\nvar MODES = [ 'grapheme', 'code_point', 'code_unit' ];\nvar FCNS = {\n\t'grapheme': firstGraphemeCluster,\n\t'code_point': firstCodePoint,\n\t'code_unit': firstCodeUnit\n};\nvar isMode = contains( MODES );\n\n\n// MAIN //\n\n/**\n* Returns the first character(s) of a string.\n*\n* @param {string} str - input string\n* @param {NonNegativeInteger} [n=1] - number of characters to return\n* @param {Options} [options] - options\n* @param {string} [options.mode=\"grapheme\"] - type of \"character\" to return (must be either `grapheme`, `code_point`, or `code_unit`)\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} second argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} output string\n*\n* @example\n* var out = first( 'last man standing' );\n* // returns 'l'\n*\n* @example\n* var out = first( 'presidential election' );\n* // returns 'p'\n*\n* @example\n* var out = first( 'javaScript' );\n* // returns 'j'\n*\n* @example\n* var out = first( 'Hidden Treasures' );\n* // returns 'H'\n*\n* @example\n* var out = first( '🐶🐮🐷🐰🐸', 2 );\n* // returns '🐶🐮'\n*\n* @example\n* var out = first( 'foo bar', 5 );\n* // returns 'foo b'\n*/\nfunction first( str ) {\n\tvar options;\n\tvar nargs;\n\tvar opts;\n\tvar n;\n\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( '1gp3F,Ex', str ) );\n\t}\n\topts = {\n\t\t'mode': 'grapheme'\n\t};\n\tnargs = arguments.length;\n\tif ( nargs === 1 ) {\n\t\tn = 1;\n\t} else if ( nargs === 2 ) {\n\t\tn = arguments[ 1 ];\n\t\tif ( isPlainObject( n ) ) {\n\t\t\toptions = n;\n\t\t\tn = 1;\n\t\t} else if ( !isNonNegativeInteger( n ) ) {\n\t\t\tthrow new TypeError( format( '1gp3X,F1', n ) );\n\t\t}\n\t} else { // nargs > 2\n\t\tn = arguments[ 1 ];\n\t\tif ( !isNonNegativeInteger( n ) ) {\n\t\t\tthrow new TypeError( format( '1gp3X,F1', n ) );\n\t\t}\n\t\toptions = arguments[ 2 ];\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( '1gp2V,FD', options ) );\n\t\t}\n\t}\n\tif ( options ) {\n\t\tif ( hasOwnProp( options, 'mode' ) ) {\n\t\t\topts.mode = options.mode;\n\t\t\tif ( !isMode( opts.mode ) ) {\n\t\t\t\tthrow new TypeError( format( '1gpLi', 'mode', MODES.join( '\", \"' ), opts.mode ) );\n\t\t\t}\n\t\t}\n\t}\n\treturn FCNS[ opts.mode ]( str, n );\n}\n\n\n// EXPORTS //\n\nexport default first;\n"],"names":["MODES","FCNS","grapheme","firstGraphemeCluster","code_point","firstCodePoint","code_unit","firstCodeUnit","isMode","contains","first","str","options","nargs","opts","n","isString","TypeError","format","mode","arguments","length","isPlainObject","isNonNegativeInteger","hasOwnProp","join"],"mappings":";;y4BAmCA,IAAIA,EAAQ,CAAE,WAAY,aAAc,aACpCC,EAAO,CACVC,SAAYC,EACZC,WAAcC,EACdC,UAAaC,GAEVC,EAASC,EAAUT,GA0CvB,SAASU,EAAOC,GACf,IAAIC,EACAC,EACAC,EACAC,EAEJ,IAAMC,EAAUL,GACf,MAAM,IAAIM,UAAWC,EAAQ,WAAYP,IAM1C,GAJAG,EAAO,CACNK,KAAQ,YAGM,KADfN,EAAQO,UAAUC,QAEjBN,EAAI,OACE,GAAe,IAAVF,GAEX,GAAKS,EADLP,EAAIK,UAAW,IAEdR,EAAUG,EACVA,EAAI,OACE,IAAMQ,EAAsBR,GAClC,MAAM,IAAIE,UAAWC,EAAQ,WAAYH,QAEpC,CAEN,IAAMQ,EADNR,EAAIK,UAAW,IAEd,MAAM,IAAIH,UAAWC,EAAQ,WAAYH,IAG1C,IAAMO,EADNV,EAAUQ,UAAW,IAEpB,MAAM,IAAIH,UAAWC,EAAQ,WAAYN,GAE1C,CACD,GAAKA,GACCY,EAAYZ,EAAS,UACzBE,EAAKK,KAAOP,EAAQO,MACdX,EAAQM,EAAKK,OAClB,MAAM,IAAIF,UAAWC,EAAQ,QAAS,OAAQlB,EAAMyB,KAAM,QAAUX,EAAKK,OAI5E,OAAOlB,EAAMa,EAAKK,MAAQR,EAAKI,EAChC"}