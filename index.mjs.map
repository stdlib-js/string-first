{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport nextGraphemeClusterBreak from '@stdlib/string-next-grapheme-cluster-break';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Returns the first visual character(s) of a string.\n*\n* @param {string} str - input string\n* @param {NonNegativeInteger} [n=1] - number of characters to return\n* @throws {TypeError} must provide a string\n* @throws {TypeError} second argument must be a nonnegative integer\n* @returns {string} output string\n*\n* @example\n* var out = first( 'last man standing' );\n* // returns 'l'\n*\n* @example\n* var out = first( 'presidential election' );\n* // returns 'p'\n*\n* @example\n* var out = first( 'javaScript' );\n* // returns 'j'\n*\n* @example\n* var out = first( 'Hidden Treasures' );\n* // returns 'H'\n*\n* @example\n* var out = first( '🐶🐮🐷🐰🐸', 2 );\n* // returns '🐶🐮'\n*\n* @example\n* var out = first( 'foo bar', 5 );\n* // returns 'foo b'\n*/\nfunction first( str, n ) {\n\tvar nextBreak;\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( 'null3R', str ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isNonNegativeInteger( n ) ) {\n\t\t\tthrow new TypeError( format( 'null3k', n ) );\n\t\t}\n\t\tnextBreak = 0;\n\t\twhile ( n > 0 ) {\n\t\t\tnextBreak = nextGraphemeClusterBreak( str, nextBreak );\n\t\t\tn -= 1;\n\t\t}\n\t} else {\n\t\tnextBreak = nextGraphemeClusterBreak( str );\n\t}\n\t// Value of `nextBreak` will be -1 if and only if `str` is an empty string or `str` has only 1 extended grapheme cluster...\n\tif ( str === '' || nextBreak === -1 ) {\n\t\treturn str;\n\t}\n\treturn str.substring( 0, nextBreak );\n}\n\n\n// EXPORTS //\n\nexport default first;\n"],"names":["first","str","n","nextBreak","isString","TypeError","format","arguments","length","isNonNegativeInteger","nextGraphemeClusterBreak","substring"],"mappings":";;0ZA+DA,SAASA,EAAOC,EAAKC,GACpB,IAAIC,EACJ,IAAMC,EAAUH,GACf,MAAM,IAAII,UAAWC,EAAQ,SAAUL,IAExC,GAAKM,UAAUC,OAAS,EAAI,CAC3B,IAAMC,EAAsBP,GAC3B,MAAM,IAAIG,UAAWC,EAAQ,SAAUJ,IAGxC,IADAC,EAAY,EACJD,EAAI,GACXC,EAAYO,EAA0BT,EAAKE,GAC3CD,GAAK,CAER,MACEC,EAAYO,EAA0BT,GAGvC,MAAa,KAARA,IAA6B,IAAfE,EACXF,EAEDA,EAAIU,UAAW,EAAGR,EAC1B"}